{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/renegade/phase_4_client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/mac/Desktop/renegade/phase_4_client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"quickFilterParser\", \"quickFilterFormatter\", \"debounceMs\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport { styled } from '@mui/material/styles';\nimport { debounce } from '@mui/material/utils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridQuickFilterValuesSelector } from '../../hooks/features/filter';\nimport { isDeepEqual } from '../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar GridToolbarQuickFilterRoot = styled(TextField, {\n  name: 'MuiDataGrid',\n  slot: 'ToolbarQuickFilter',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.toolbarQuickFilter;\n  }\n})(function (_ref) {\n  var _ref2;\n  var theme = _ref.theme;\n  return _ref2 = {\n    width: 'auto',\n    paddingBottom: theme.spacing(0.5),\n    '& input': {\n      marginLeft: theme.spacing(0.5)\n    },\n    '& .MuiInput-underline:before': {\n      borderBottom: \"1px solid \".concat(theme.palette.divider)\n    }\n  }, _defineProperty(_ref2, \"& input[type=search]::-ms-clear,\\n& input[type=search]::-ms-reveal\", {\n    /* clears the 'X' icon from IE */\n    display: 'none',\n    width: 0,\n    height: 0\n  }), _defineProperty(_ref2, \"& input[type=\\\"search\\\"]::-webkit-search-decoration,\\n  & input[type=\\\"search\\\"]::-webkit-search-cancel-button,\\n  & input[type=\\\"search\\\"]::-webkit-search-results-button,\\n  & input[type=\\\"search\\\"]::-webkit-search-results-decoration\", {\n    /* clears the 'X' icon from Chrome */\n    display: 'none'\n  }), _ref2;\n});\nvar defaultSearchValueParser = function defaultSearchValueParser(searchText) {\n  return searchText.split(' ').filter(function (word) {\n    return word !== '';\n  });\n};\nvar defaultSearchValueFormatter = function defaultSearchValueFormatter(values) {\n  return values.join(' ');\n};\nfunction GridToolbarQuickFilter(props) {\n  var _rootProps$components;\n  var _props$quickFilterPar = props.quickFilterParser,\n    quickFilterParser = _props$quickFilterPar === void 0 ? defaultSearchValueParser : _props$quickFilterPar,\n    _props$quickFilterFor = props.quickFilterFormatter,\n    quickFilterFormatter = _props$quickFilterFor === void 0 ? defaultSearchValueFormatter : _props$quickFilterFor,\n    _props$debounceMs = props.debounceMs,\n    debounceMs = _props$debounceMs === void 0 ? 500 : _props$debounceMs,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var quickFilterValues = useGridSelector(apiRef, gridQuickFilterValuesSelector);\n  var _React$useState = React.useState(function () {\n      return quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    searchValue = _React$useState2[0],\n    setSearchValue = _React$useState2[1];\n  var _React$useState3 = React.useState(quickFilterValues),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    prevQuickFilterValues = _React$useState4[0],\n    setPrevQuickFilterValues = _React$useState4[1];\n  React.useEffect(function () {\n    if (!isDeepEqual(prevQuickFilterValues, quickFilterValues)) {\n      // The model of quick filter value has been updated\n      setPrevQuickFilterValues(quickFilterValues); // Update the input value if needed to match the new model\n\n      setSearchValue(function (prevSearchValue) {\n        return isDeepEqual(quickFilterParser(prevSearchValue), quickFilterValues) ? prevSearchValue : quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []);\n      });\n    }\n  }, [prevQuickFilterValues, quickFilterValues, quickFilterFormatter, quickFilterParser]);\n  var updateSearchValue = React.useCallback(function (newSearchValue) {\n    apiRef.current.setQuickFilterValues(quickFilterParser(newSearchValue));\n  }, [apiRef, quickFilterParser]);\n  var debouncedUpdateSearchValue = React.useMemo(function () {\n    return debounce(updateSearchValue, debounceMs);\n  }, [updateSearchValue, debounceMs]);\n  var handleSearchValueChange = React.useCallback(function (event) {\n    var newSearchValue = event.target.value;\n    setSearchValue(newSearchValue);\n    debouncedUpdateSearchValue(newSearchValue);\n  }, [debouncedUpdateSearchValue]);\n  var handleSearchReset = React.useCallback(function () {\n    setSearchValue('');\n    updateSearchValue('');\n  }, [updateSearchValue]);\n  return /*#__PURE__*/_jsx(GridToolbarQuickFilterRoot, _extends({\n    as: rootProps.components.BaseTextField,\n    variant: \"standard\",\n    value: searchValue,\n    onChange: handleSearchValueChange,\n    placeholder: apiRef.current.getLocaleText('toolbarQuickFilterPlaceholder'),\n    \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterLabel'),\n    type: \"search\",\n    InputProps: {\n      startAdornment: /*#__PURE__*/_jsx(rootProps.components.QuickFilterIcon, {\n        fontSize: \"small\"\n      }),\n      endAdornment: /*#__PURE__*/_jsx(IconButton, {\n        \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterDeleteIconLabel'),\n        size: \"small\",\n        sx: {\n          visibility: searchValue ? 'visible' : 'hidden'\n        },\n        onClick: handleSearchReset,\n        children: /*#__PURE__*/_jsx(rootProps.components.QuickFilterClearIcon, {\n          fontSize: \"small\"\n        })\n      })\n    }\n  }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridToolbarQuickFilter.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The debounce time in milliseconds.\n   * @default 500\n   */\n  debounceMs: PropTypes.number,\n  /**\n   * Function responsible for formatting values of quick filter in a string when the model is modified\n   * @param {any[]} values The new values passed to the quick filter model\n   * @returns {string} The string to display in the text field\n   */\n  quickFilterFormatter: PropTypes.func,\n  /**\n   * Function responsible for parsing text input in an array of independent values for quick filtering.\n   * @param {string} input The value entered by the user\n   * @returns {any[]} The array of value on which quick filter is applied\n   */\n  quickFilterParser: PropTypes.func\n} : void 0;\nexport { GridToolbarQuickFilter };","map":null,"metadata":{},"sourceType":"module"}