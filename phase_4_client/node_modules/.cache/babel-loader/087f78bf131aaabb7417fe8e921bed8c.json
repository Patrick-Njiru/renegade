{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridColumnGroupsLookupSelector } from '../../hooks/features/columnGrouping/gridColumnGroupsSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { GridGenericColumnHeaderItem } from './GridGenericColumnHeaderItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes,\n    headerAlign = ownerState.headerAlign,\n    isDragging = ownerState.isDragging,\n    showRightBorder = ownerState.showRightBorder,\n    showColumnBorder = ownerState.showColumnBorder,\n    groupId = ownerState.groupId;\n  var slots = {\n    root: ['columnHeader', headerAlign === 'left' && 'columnHeader--alignLeft', headerAlign === 'center' && 'columnHeader--alignCenter', headerAlign === 'right' && 'columnHeader--alignRight', isDragging && 'columnHeader--moving', showRightBorder && 'withBorder', showColumnBorder && 'columnHeader--showColumnBorder', groupId === null ? 'columnHeader--emptyGroup' : 'columnHeader--filledGroup'],\n    draggableContainer: ['columnHeaderDraggableContainer'],\n    titleContainer: ['columnHeaderTitleContainer'],\n    titleContainerContent: ['columnHeaderTitleContainerContent']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridColumnGroupHeader(props) {\n  var _apiRef$current$getRo, _columnGroupsLookup$g;\n  var groupId = props.groupId,\n    width = props.width,\n    depth = props.depth,\n    maxDepth = props.maxDepth,\n    fields = props.fields,\n    height = props.height,\n    colIndex = props.colIndex,\n    isLastColumn = props.isLastColumn,\n    extendRowFullWidth = props.extendRowFullWidth;\n  var rootProps = useGridRootProps();\n  var apiRef = useGridApiContext();\n  var columnGroupsLookup = useGridSelector(apiRef, gridColumnGroupsLookupSelector);\n  var _ref = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {\n      hasScrollX: false,\n      hasScrollY: false\n    },\n    hasScrollX = _ref.hasScrollX,\n    hasScrollY = _ref.hasScrollY;\n  var group = groupId ? columnGroupsLookup[groupId] : {};\n  var _group$headerName = group.headerName,\n    headerName = _group$headerName === void 0 ? groupId != null ? groupId : '' : _group$headerName,\n    _group$description = group.description,\n    description = _group$description === void 0 ? '' : _group$description,\n    _group$headerAlign = group.headerAlign,\n    headerAlign = _group$headerAlign === void 0 ? undefined : _group$headerAlign;\n  var headerComponent;\n  var render = groupId && ((_columnGroupsLookup$g = columnGroupsLookup[groupId]) == null ? void 0 : _columnGroupsLookup$g.renderHeaderGroup);\n  var renderParams = {\n    groupId: groupId,\n    headerName: headerName,\n    description: description,\n    depth: depth,\n    maxDepth: maxDepth,\n    fields: fields,\n    colIndex: colIndex,\n    isLastColumn: isLastColumn\n  };\n  if (groupId && render) {\n    headerComponent = render(renderParams);\n  }\n  var removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;\n  var showRightBorder = !isLastColumn ? rootProps.showColumnRightBorder : !removeLastBorderRight && !extendRowFullWidth;\n  var showColumnBorder = rootProps.showColumnRightBorder;\n  var ownerState = _extends({}, props, {\n    classes: rootProps.classes,\n    showRightBorder: showRightBorder,\n    showColumnBorder: showColumnBorder,\n    headerAlign: headerAlign,\n    depth: depth,\n    isDragging: false\n  });\n  var label = headerName != null ? headerName : groupId;\n  var id = useId();\n  var elementId = groupId === null ? \"empty-group-cell-\".concat(id) : groupId;\n  var classes = useUtilityClasses(ownerState);\n  var headerClassName = typeof group.headerClassName === 'function' ? group.headerClassName(renderParams) : group.headerClassName;\n  return /*#__PURE__*/_jsx(GridGenericColumnHeaderItem, {\n    classes: classes,\n    columnMenuOpen: false,\n    colIndex: colIndex,\n    height: height,\n    isResizing: false,\n    sortDirection: null,\n    hasFocus: false,\n    tabIndex: -1,\n    isDraggable: false,\n    headerComponent: headerComponent,\n    headerClassName: headerClassName,\n    description: description,\n    elementId: elementId,\n    width: width,\n    columnMenuIconButton: null,\n    columnTitleIconButtons: null,\n    resizable: false,\n    label: label,\n    \"aria-colspan\": fields.length // The fields are wrapped between |-...-| to avoid confusion between fields \"id\" and \"id2\" when using selector data-fields~=\n    ,\n\n    \"data-fields\": \"|-\".concat(fields.join('-|-'), \"-|\"),\n    disableHeaderSeparator: true\n  });\n}\nexport { GridColumnGroupHeader };","map":null,"metadata":{},"sourceType":"module"}